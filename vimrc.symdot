" Initialize and configure plugins
source ~/.vim/plugins.vim

filetype plugin indent on
syntax on

" Tabbing
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set smarttab
set autoread

set mouse=a
set so=4

" Searching
set magic
set ignorecase
set smartcase

" Completion
set omnifunc=syntaxcomplete#Complete
inoremap <NUL> <C-x><C-o>

set completeopt=longest

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" keep menu item always highlighted by simulating <Down> on pu visible
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
    \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" keep menu item always highlighted by simulating <Up> on pu visible
inoremap <expr> <C-p> pumvisible() ? '<C-p>' :
  \ '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<CR>'
" Arcane witchcraft
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
    \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" open omni completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <C-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
    \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" open user completion menu closing previous if open and opening new menu without changing the text
inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
    \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'


" Make backspace behave the way I expect
set backspace=indent,eol,start

" Define the map Leader
let mapleader="\\"

" MARK: map

" Edit the .vimrc
nnoremap <Leader>ev :split $MYVIMRC<cr>
" Edit plugins.vim
nnoremap <Leader>ep :split ~/.vim/plugins.vim<cr>
" Source the .vimrc
nnoremap <Leader>sv :source $MYVIMRC<cr>


" Keybindings for Escape
inoremap jj <esc>
inoremap jk <esc>

" Convenience mappings

" Force save a file
cmap W w !sudo tee % >/dev/null

" trim whitespace from end of lines
nnoremap <Leader>t<space> :%s/\s\+$//<cr>

" Show / Toggle colorcolumn
set colorcolumn=0
let s:color_column_old = 81
function! s:ToggleColorColumn()
    if s:color_column_old == 0
        let s:color_column_old = &colorcolumn
        windo let &colorcolumn = 0
    else
        windo let &colorcolumn=s:color_column_old
        let s:color_column_old = 0
    endif
endfunction
nnoremap <silent> <Leader>8 :call <SID>ToggleColorColumn()<cr>

