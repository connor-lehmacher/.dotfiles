#!/bin/bash
# Install script to set up a general unix / linux capable computer as a
# development machine

# TODO: handle some command line parameters to do things such as only installing
# dotfiles and reinstalling dotfiles

function usage_info () {
    echo "Usage: $0 [options]"
    echo "Install dotfiles and do any other necessary configuration"
    echo ""
    echo "  --update        update the configuration that is currently installed"
    echo "  --minimal       install a minimal set of files that can be completely"
    echo "                      uninstalled using the --uninstall option"
    echo "  --all           install everything, intended for new systems or for where"
    echo "                      the defaults do not install everything necessary"
    echo "  --force         overwrite existing configuration when installing files"
    echo "  --uninstall     symlink configuration to its proper location"
    echo "  --help          show this help and then quit"
}

# Set Operating System Variables
if [ "$(uname)" == "Darwin" ]; then
    export DARWIN=1
elif [ "$(uname)" == "Linux" ]; then
    export LINUX=1
fi

# represents the number of features to install
# 0 := none, 1 := minimal, 2 := default, 3 := all, "uninstall" := uninstall
features=2

for arg; do
    case "$arg" in
        --update)
            update=1;;
        --minimal)
            features=1;;
        --all)
            features=3;;
        --force)
            force=1;;
        --uninstall)
            features=uninstall;;
        --help)
            usage_info
            exit 0;;
    esac
done

if [ "$features" == "uninstall" ]; then
    # uninstall the dotfiles
    echo "uninstalling is currently unimplemented"
    exit 0
fi

echo "Installing dotfiles..."
echo -e "update: $update\nforce: $force\nfeatures: $features"

# Get the location of the dotfiles
pushd "$(dirname "$0")" > /dev/null
DOTFILES="$(pwd -P)"
popd > /dev/null

# Create a file at ~/.dotfiles if no file is present there and not installed there
if [ "$DOTFILES" != "$HOME/.dotfiles" ]; then
    # test if a file or symlink is present at ~/.dotfiles
    if [ -e "$HOME/.dotfiles" ] || [ -h "$HOME/.dotfiles" ]; then
        # exit the program as this cannot be sucessfully installed then
        echo -e "A file or directory is present at $HOME/.dotfiles... Aborting."
        exit 1
    fi
    # put the location of dotfiles at ~/.dotfiles in a file
    echo "$DOTFILES" > "$HOME/.dotfiles"
fi

# Set XDG_CONFIG_HOME if unset
[ -n "$XDG_CONFIG_HOME" ] || export XDG_CONFIG_HOME="$HOME/.config"

if [ -n "$DARWIN" ] && [ "$features" -ge 3 ]; then
    # Install homebrew and brew everything in Brewfile

    echo -e "\nInstalling xcode commandline tools..."
    xcode-select --install >/dev/null 2>&1


    # Install homebrew if nescessary
    brew help >/dev/null 2>&1 || \
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    echo -e "\nBrewing formulas..."

    # Use brew-bundle to install brewfiles in a good order
    brew tap Homebrew/bundle 2>/dev/null
    brew bundle --file="$DOTFILES/Brewfile"
fi

# Takes a pattern (e.g. "dot_home/any/*" and a function that transforms the basename
# of the file to its destination then links all files ending in the pattern to
# the correct location
function linkfiles () {
    local path="$1"
    local pattern="$2"
    local mapper="$3"
    tolink=$(find -H "$DOTFILES/link/$path" -mindepth 1 -maxdepth 1 -name "$pattern")
    for file in $tolink; do
        local target
        # FIXME: doesn't remove suffixes etc. This is acceptable
        target="$("$mapper" "$(basename "$file")")"
        if [ -n "$force" ] || [ ! -e "$target" ] ||\
            [ -n "$update" ] && [ -h "$target" ]; then
            echo "Creating symlink for $file"
            ln -f -s "$file" "$target"
        else
            echo "$target exists... Skipping."
        fi
    done
}

if [ "$features" -ge 1 ]; then
    echo -e "\nCreating symlinks..."

    function symdot_mapper { echo "$HOME/.$1"; }
    # Symlink files to be symlinked to every platform
    linkfiles "dot_home/any" "*" "symdot_mapper"
    # Symlink OS X specific files
    [ -n "$DARWIN" ] && linkfiles "dot_home/osx" "*" "symdot_mapper"

    # Make sure XDG_CONFIG_HOME exists
    mkdir -p "$HOME/.config"
    function config_mapper { echo "$HOME/.config/$1"; }
    # symlink files that should go in xdg_config_home
    linkfiles "config" "*" "config_mapper"
fi

# Setup fzf
if [ "$features" -ge 2 ] && [ ! -d "$HOME/.fzf" ]; then
    echo -e "\nInstalling fzf..."
    git clone https://github.com/junegunn/fzf.git --depth 1 "$HOME/.fzf" >/dev/null &&\
    "$HOME/.fzf/install" --bin || echo "Failed to install fzf!"
fi
